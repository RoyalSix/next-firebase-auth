import path from"path";import jscodeshift from"jscodeshift";import transform from"codemod/rename-authuser-setauthcookies";import readFile from"codemod/util/readFile";function read(e){return readFile(path.join(__dirname,e))}const transformName="rename-authuser-setauthcookies";describe("setAuthCookies return property change: AuthUser -> user",(()=>{it("works as expected",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputA.js`),path:require.resolve(`./${transformName}.fixtures/inputA.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputA.js`);expect(e).toEqual(t)})),it("does not affect unrelated variables named `AuthUser`",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputB.js`),path:require.resolve(`./${transformName}.fixtures/inputB.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputB.js`);expect(e).toEqual(t)})),it("works with a promise variable not immediately awaited",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputC.js`),path:require.resolve(`./${transformName}.fixtures/inputC.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputC.js`);expect(e).toEqual(t)})),it("does not affect functions named setAuthCookies imported from elsewhere",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputD.js`),path:require.resolve(`./${transformName}.fixtures/inputD.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputD.js`);expect(e).toEqual(t)})),it("works when using promise syntax with an arrow function",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputE.js`),path:require.resolve(`./${transformName}.fixtures/inputE.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputE.js`);expect(e).toEqual(t)})),it("works with variable reassignment",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputF.js`),path:require.resolve(`./${transformName}.fixtures/inputF.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputF.js`);expect(e).toEqual(t)})),it("works when using promise syntax with a function expression",(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputG.js`),path:require.resolve(`./${transformName}.fixtures/inputG.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputG.js`);expect(e).toEqual(t)})),it('does not modify or throw an error if variables are assigned from setAuthCookies but they do not include "AuthUser"',(()=>{const e=transform({source:read(`./${transformName}.fixtures/inputH.js`),path:require.resolve(`./${transformName}.fixtures/inputH.js`)},{jscodeshift},{}),t=read(`./${transformName}.fixtures/outputH.js`);expect(e).toEqual(t)}))}));